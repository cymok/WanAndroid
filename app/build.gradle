// https://developer.android.com/build
// https://plugins.gradle.org/
plugins {
    id "com.android.application" // agp
    id "org.jetbrains.kotlin.android" // kotlin
    id "kotlin-parcelize"
    id "kotlin-kapt"
    id "com.google.devtools.ksp"
}

apply from: "../config_source.gradle"

def time = new Date()

//def cmdGitCommitId = 'git rev-parse --short HEAD'
//def gitCommitId = cmdGitCommitId.execute().text.trim()

static def gitCommitId() {
    try {
        def process = 'git rev-parse --short HEAD'.execute()
        process.waitFor()
        def commitId = process.text.trim()
        return commitId
    } catch (ignored) {
        return "nogitcommitid"
    }
}

static def gitCommitCount() {
    try {
        // 返回当前分支的提交数量
        def process = 'git rev-list --count HEAD'.execute()
        process.waitFor()
        def commitCount = process.text.toInteger()
        return commitCount
    } catch (ignored) {
        return 1
    }
}

static def gitLastTag() {
    try {
        // 若当前节点有 tag，将直接返回 tagName。
        // 若 tag 在当前分支前 2 个节点，将返回 tagName-2-g<hash> 的字符串，其中 <hash> 是当前 HEAD 的短哈希值。
        // 若当前分支没有标签，返回当前 HEAD 的短哈希值。
        def process = 'git describe --tags --always'.execute()
        process.waitFor()
        def tag = process.text.trim()
        // 通过 `- "v"` 来移除可能存在的前缀 "v"
        return tag - "v"
    } catch (ignored) {
        return "1.0.0"
    }
}

android {
    namespace 'com.example.wan.android'
//    testNamespace  'com.example.wan.android.test'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.wan.android"
        minSdk 21
        targetSdk 35
//        versionCode 1
        versionName "0.0.1"
        versionCode gitCommitCount()
//        versionName gitLastTag()

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        resConfigs "zh"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        buildConfigField "String", "COMMIT_ID", "\"${gitCommitId()}\""
        buildConfigField "String", "BUILD_TIME", "\"${time.time}\""
        buildConfigField "String", "OS_ARCH", "\"${System.properties['os.arch']}\""
        // On Java 11 (11.0.15) and Java 17 (17.0.3), System.getProperty("os.name") returns Windows 11, but "os.version" still reports 10.0
        buildConfigField "String", "OS_NAME", "\"${System.properties['os.name']}\""
        buildConfigField "String", "USER_NAME", "\"${System.properties['user.name']}\""
        buildConfigField "String", "GRADLE_VERSION", "\"${gradle.gradleVersion}\""
        buildConfigField "String", "GRADLE_JDK", "\"${System.properties['java.version']}\""
        buildConfigField "String", "JAVA_JVM", "\"1.8\"" // 对应 compileOptions
        buildConfigField "String", "KOTLIN_JVM", "\"1.8\"" // 对应 kotlinOptions
        buildConfigField "String", "KOTLIN_VERSION", "\"${kotlin_version}\""
        vectorDrawables {
            useSupportLibrary true
        }
//        buildConfigField "String", "FLUTTER_VERSION", "\"${flutter_version}\""
    }

//    ndkVersion '21.4.7075529'

    signingConfigs {
        config {
            storeFile file(rootProject.ext.sign.filePath)
            storePassword rootProject.ext.sign.storePassword
            keyAlias rootProject.ext.sign.keyAlias
            keyPassword rootProject.ext.sign.keyPassword
        }
    }

    // https://developer.android.com/build/build-variants
    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = ("${model.name}" +
                        "_v${variant.versionName}" +
                        "_${variant.versionCode}" +
                        "_${variant.buildType.name}" +
//                        "_${variant.productFlavors[0].name}" +
                        "_${gitCommitId()}" +
                        "_${time.time}" +
                        ".apk")/*.replace("_release", "")*/
            }
        }
    }
    flavorDimensions += "mode"
    productFlavors {
        app {
            dimension "mode"
            manifestPlaceholders = [app_channel: "\"${name}\""]
            buildConfigField "String", "APP_CHANNEL", "\"${name}\""
        }
    }

    // https://developer.android.com/build/jdks
    compileOptions {
        // 代码 的 java 编译版本
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        // 代码 的 kotlin 编译版本
        jvmTarget = '1.8'
    }
    kotlin {
        // gradle 项目构建的 java 和 kotlin 编译版本
//        jvmToolchain(8)
        jvmToolchain(17) // default
    }

    buildFeatures {
        buildConfig = true
        viewBinding true
        compose = true
    }
    composeOptions {
        // KGP 要对应 android.composeOptions.kotlinCompilerExtensionVersion
        // compose-kotlin https://developer.android.com/jetpack/androidx/releases/compose-kotlin
        // 1.3.2 -> kotlin 1.7.20
        // 1.4.8 -> kotlin 1.8.22
        // 1.5.14 -> kotlin 1.9.24
        // Compose Compiler Gradle plugin -> kotlin 2.0.0+
        // https://developer.android.com/develop/ui/compose/compiler
        kotlinCompilerExtensionVersion = "1.5.14"
    }
    packagingOptions { // 这个块定义了打包相关的配置
        // 指定在构建 APK 或 AAR 时要排除的文件或路径
        // `AL2.0` 和 `LGPL2.1` 通常是许可证文件，可能在某些情况下不需要打包进最终的 APK 或 AAR 中
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    lint {
        baseline = file("lint-baseline.xml")
    }
/*
    lintOptions {
        textReport true // 输出lint报告
        textOutput 'stdout'
        abortOnError false // 遇到错误不停止
    }
*/
}

// https://developer.android.com/build/dependencies
// https://mvnrepository.com/
dependencies {
    configurations.configureEach {
        resolutionStrategy {
            // 强制指定版本
            // emoji2 1.4.0 需要 compileSdk 34
//            force 'androidx.emoji2:emoji2:1.3.0'
//            force 'androidx.emoji2:emoji2-views-helper:1.3.0'
        }
    }
    // 依赖项配置
    // https://developer.android.google.cn/studio/build/dependencies?hl=zh-cn&agpversion=4.0#dependency_configurations
    // Module
//    implementation project(":module_common")
    // Lib
    // libs 下所有的 jar aar
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'], exclude: [
//            'module_lint_aar-debug.aar' // 排除 lint 文件, 另外使用 lintChecks 引用
    ])
    // 指定文件
//    implementation files('libs/module_lint_aar-debug.aar')
//    lintChecks files('libs/module_lint_aar-debug.aar')
//    implementation files('libs/module_lint_lib.jar')
    // Lint 专用
    //noinspection DependencyNotationArgument
    lintChecks project(':module_lint_lib')

    // Test
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.2.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1"

    implementation "androidx.multidex:multidex:2.0.1"

    // Compose
    // Compose BoM
    // https://developer.android.com/jetpack/compose/bom
    // https://developer.android.com/develop/ui/compose/bom/bom-mapping
//    val composeBoMVersion = "2023.10.01"
//    val composeBoMVersion = "2024.01.00"
//    val composeBoMVersion = "2024.02.02"
//    val composeBoMVersion = "2024.03.00"
//    val composeBoMVersion = "2024.04.01"
//    val composeBoMVersion = "2024.05.00"
//    val composeBoMVersion = "2024.06.00"
//    def composeBoMVersion = "2024.08.00"
    def composeBoMVersion = "2024.09.03"
    implementation(platform("androidx.compose:compose-bom:${composeBoMVersion}"))
    androidTestImplementation(platform("androidx.compose:compose-bom:${composeBoMVersion}"))
    implementation("androidx.compose.runtime:runtime")
    implementation("androidx.activity:activity-compose")
    // Material
    implementation("androidx.compose.material:material")
    // Material Design 3
    implementation("androidx.compose.material3:material3")
    // the main APIs for the underlying toolkit systems
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-geometry")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-text")
    // Android Studio Preview support
    implementation("androidx.compose.ui:ui-tooling-preview")
    debugImplementation("androidx.compose.ui:ui-tooling")
    // UI Tests
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
    // Optional - Included automatically by material, only add when you need
    // the icons but not the material library (e.g. when using Material3 or a
    // custom design system based on Foundation)
    implementation("androidx.compose.material:material-icons-core")
    // Optional - Add full set of material icons
    implementation("androidx.compose.material:material-icons-extended")
    // Optional - Add window size utils
    implementation("androidx.compose.material3:material3-window-size-class")
    implementation("androidx.compose.ui:ui-util")
    implementation("androidx.compose.runtime:runtime-livedata")
    // Optional - Integration with ViewBinding
    implementation("androidx.compose.ui:ui-viewbinding")
    // animation
    implementation("androidx.compose.animation:animation")
    implementation("androidx.compose.animation:animation-core")
    implementation("androidx.compose.animation:animation-graphics")
    // Optional - Integration with RxJava
    implementation("androidx.compose.runtime:runtime-rxjava2")
    // Accompanist: Compose 的实验性 APIs
    // https://github.com/google/accompanist
    // compose drawable painter
    // https://github.com/google/accompanist/tree/main/drawablepainter
    implementation("com.google.accompanist:accompanist-drawablepainter:0.32.0")

    // paging
    implementation("androidx.paging:paging-compose:3.3.2") // compose

    // Compose 图片视频加载
    // https://github.com/coil-kt/coil
    implementation(platform("io.coil-kt:coil-bom:2.4.0"))
    implementation("io.coil-kt:coil-compose")
    implementation("io.coil-kt:coil-gif")
    implementation("io.coil-kt:coil-video")

    // 图库
    // https://github.com/leavesCZY/Matisse
    implementation("io.github.leavesczy:matisse:1.1.4")

    // Android
    // KTX https://developer.android.com/kotlin/ktx
    implementation platform("org.jetbrains.kotlin:kotlin-bom:${kotlin_version}")
    implementation "com.google.android.material:material:1.12.0" // 33 -> 1.9.0
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "androidx.core:core-ktx:1.13.1" // 33 -> 1.10.1
    implementation "androidx.core:core-splashscreen:1.0.1"
    implementation 'androidx.activity:activity-ktx:1.9.2'
    def lifecycleVersion = "2.8.6"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0" // 停止维护
    implementation "androidx.lifecycle:lifecycle-process:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-service:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:${lifecycleVersion}"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.viewpager2:viewpager2:1.1.0"
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:${lifecycleVersion}") // compose
    // 1.1 新特性 registerFragmentTransactionCallback
    def navigationVersion = "2.8.2" // 33 -> 2.6.0
    implementation "androidx.navigation:navigation-fragment-ktx:${navigationVersion}"
    implementation "androidx.navigation:navigation-ui-ktx:${navigationVersion}"
    implementation("androidx.navigation:navigation-compose:${navigationVersion}") // compose
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "androidx.sqlite:sqlite-ktx:2.4.0"
    // https://developer.android.com/jetpack/androidx/releases/datastore
    implementation("androidx.datastore:datastore:1.1.1") // datastore
    implementation("androidx.datastore:datastore-preferences:1.1.1") // preferences datastore
    // https://developer.android.com/jetpack/androidx/releases/room
    def roomVersion = "2.6.1"
    implementation("androidx.room:room-runtime:${roomVersion}")
    implementation("androidx.room:room-ktx:${roomVersion}")
//    kapt("androidx.room:room-compiler:${roomVersion}")
    ksp("androidx.room:room-compiler:${roomVersion}")
    testImplementation("androidx.room:room-testing:${roomVersion}")
    implementation "androidx.work:work-runtime-ktx:2.9.1"
    implementation "androidx.paging:paging-runtime-ktx:3.3.2"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    // 快乐库 - 扩展
    // https://github.com/LouisCAD/Splitties
    def splittiesVersion = "3.0.0"
    implementation "com.louiscad.splitties:splitties-fun-pack-android-base:${splittiesVersion}"
    implementation "com.louiscad.splitties:splitties-fun-pack-android-base-with-views-dsl:${splittiesVersion}"
    implementation "com.louiscad.splitties:splitties-fun-pack-android-appcompat:${splittiesVersion}"
    implementation "com.louiscad.splitties:splitties-fun-pack-android-appcompat-with-views-dsl:${splittiesVersion}"
    implementation "com.louiscad.splitties:splitties-fun-pack-android-material-components:${splittiesVersion}"
    implementation "com.louiscad.splitties:splitties-fun-pack-android-material-components-with-views-dsl:${splittiesVersion}"
    // 快乐库 - 工具
    // https://github.com/Blankj/AndroidUtilCode
    implementation "com.blankj:utilcodex:1.31.1"
    // 沉浸状态栏
    // https://github.com/gyf-dev/ImmersionBar
    implementation "com.geyifeng.immersionbar:immersionbar:3.2.2"
    implementation "com.geyifeng.immersionbar:immersionbar-ktx:3.2.2"
    // gson
    implementation "com.google.code.gson:gson:2.10.1"
    // 网络
    // https://github.com/square/okhttp
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    // https://github.com/square/retrofit
    def retrofitVersion = "2.11.0"
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-scalars:${retrofitVersion}"
    // https://github.com/franmontiel/PersistentCookieJar
    implementation "com.github.franmontiel:PersistentCookieJar:v1.0.1"
    // 数据库
    // https://github.com/guolindev/LitePal
    implementation "org.litepal.guolindev:core:3.2.3"
    // 图片
    // https://github.com/bumptech/glide
    // https://bumptech.github.io/glide/doc/download-setup.html#kotlin---ksp
    def glideVersion = "4.16.0"
    implementation "com.github.bumptech.glide:glide:${glideVersion}"
//    kapt "com.github.bumptech.glide:compiler:${glideVersion}"
    ksp "com.github.bumptech.glide:ksp:${glideVersion}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${glideVersion}"
    implementation("com.github.bumptech.glide:compose:1.0.0-beta01") // compose
    // https://github.com/wasabeef/glide-transformations
    implementation "jp.wasabeef:glide-transformations:4.3.0"
    // 权限
    // https://github.com/guolindev/PermissionX
    implementation "com.guolindev.permissionx:permissionx:1.8.1"
    // 消息
    // https://github.com/JeremyLiao/LiveEventBus
    implementation "io.github.jeremyliao:live-event-bus-x:1.8.0"
    // 快乐库 - UI
    // https://github.com/RuffianZhong/RWidgetHelper
    implementation "com.github.RuffianZhong:RWidgetHelper:androidx.v0.0.14"
    // RecyclerView ItemDecoration
    // https://github.com/grzegorzojdana/SpacingItemDecoration
    implementation "com.github.grzegorzojdana:SpacingItemDecoration:1.1.0"
    // https://github.com/square/leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:2.12"
    // 通过委托 自动处理 `Fragment.onDestroyView()` 时的 `viewBinding = null` 防止内存泄漏
    // https://github.com/androidbroadcast/ViewBindingPropertyDelegate
    implementation "com.github.kirich1409:viewbindingpropertydelegate-full:1.5.9"
//    implementation "com.github.kirich1409:viewbindingpropertydelegate-noreflection:1.5.9"

    // https://github.com/youth5201314/banner
    implementation "io.github.youth5201314:banner:2.2.2"

    // 弹窗
    // https://github.com/li-xiaojun/XPopup
    implementation("com.github.li-xiaojun:XPopup:2.9.19") {
        exclude group: "com.davemorrissey.labs", module: "subsampling-scale-image-view-androidx"
    }

    // 刷新
    // https://github.com/scwang90/SmartRefreshLayout
    implementation "io.github.scwang90:refresh-layout-kernel:2.0.6"      //核心必须依赖
    implementation "io.github.scwang90:refresh-header-classics:2.0.6"    //经典刷新头
    implementation "io.github.scwang90:refresh-footer-classics:2.0.6"    //经典加载
    implementation "io.github.scwang90:refresh-header-falsify:2.0.6"     //虚拟刷新头
    implementation "io.github.scwang90:refresh-header-material:2.0.6"    //谷歌刷新头
    implementation "io.github.scwang90:refresh-header-two-level:2.0.6"   //二级刷新头

    // 流动布局 标签
    // https://github.com/hongyangAndroid/FlowLayout
    implementation "com.hyman:flowlayout-lib:1.1.2"

}
